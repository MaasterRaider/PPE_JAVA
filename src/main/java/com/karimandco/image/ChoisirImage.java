/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.karimandco.image;

import com.karimandco.auth.Utilisateur;
import com.karimandco.image.DaoSIO;
import com.karimandco.image.DaoSIOrequest;
import com.karimandco.image.Image;
import java.awt.Color;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.JFileChooser;
import java.io.InputStream;
import java.sql.ResultSet;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author metac
 */
public class ChoisirImage extends javax.swing.JPanel {

    javax.swing.JDialog panneauPere = null;

    /**
     * Creates new form ChoisirImage
     */
    DaoSIO connexion;
    JFileChooser fichier;
    InputStream stream;
    InputStream imagePrint;
    File file;

    public ChoisirImage() {
        initComponents();
        try {
            this.connexion = DaoSIO.getInstance();
        } catch (Exception e) {
            this.connexion = null;
        }
        fichier = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Images Uniquement", "jpg", "bmp", "jpeg", "png");
        fichier.setFileFilter(filter);
        stream = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSelectFile = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabelImages = new javax.swing.JLabel();
        jButtonSend = new javax.swing.JButton();
        jLabelSuccess = new javax.swing.JLabel();
        jLabelSelect = new javax.swing.JLabel();

        jButtonSelectFile.setBackground(new java.awt.Color(255, 153, 0));
        jButtonSelectFile.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSelectFile.setText("CHOISIR UNE IMAGE");
        jButtonSelectFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSelectFileMouseClicked(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelImages, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelImages, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButtonSend.setBackground(new java.awt.Color(0, 153, 51));
        jButtonSend.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSend.setText("ENVOYER UNE IMAGE");
        jButtonSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSendMouseClicked(evt);
            }
        });

        jLabelSuccess.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSuccess.setText("...");

        jLabelSelect.setForeground(new java.awt.Color(255, 255, 255));
        jLabelSelect.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSelect.setText("Aucun fichier n'a été selectionné");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(230, Short.MAX_VALUE)
                .addComponent(jLabelSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabelSuccess)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(36, 36, 36)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButtonSend, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSelectFile, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(31, 31, 31)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(65, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabelSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                .addComponent(jLabelSuccess)
                .addGap(89, 89, 89))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(67, 67, 67)
                            .addComponent(jButtonSelectFile, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(25, 25, 25)
                            .addComponent(jButtonSend, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(72, 72, 72)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(52, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setPanneauPere(JDialog panneauPere) {
        this.panneauPere = panneauPere;
    }
    
    
    
    private void jButtonSelectFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSelectFileMouseClicked
        this.file = null;
        int returnval = fichier.showOpenDialog(this);
        if (returnval == JFileChooser.APPROVE_OPTION) {
            this.file = fichier.getSelectedFile();
            encodeToBlob();
            String pathFichier = this.file.getAbsolutePath();
            jLabelSelect.setText(pathFichier);
            try {
                byte[] imagebyte = new byte[stream.available()];
                imagePrint.read(imagebyte);
                //  Lire le Blob en tableau
                //  Convertion du tableau en image
                ImageIcon imageFini = new ImageIcon(new ImageIcon(imagebyte).getImage().getScaledInstance(250, -1, Image.DEFAULT_CURSOR));
                jLabelImages.setIcon(imageFini);
            } catch (Exception e) {
                //Echec de la convertion
                Logger.getLogger(Image.class.getName()).log(Level.SEVERE, null, e);
            }

        }
    }//GEN-LAST:event_jButtonSelectFileMouseClicked

    private void jButtonSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSendMouseClicked
        try {
            this.connexion = DaoSIO.getInstance();
        } catch (Exception e) {
            this.connexion = null;
        }
        DaoSIOrequest daoReq = new DaoSIOrequest();
        if (this.connexion.connexionActive()) {
            if (stream != null) {
                if (file.length() <= 3000000) {
                    String req = "select photo from utilisateurs where id = " + Utilisateur.getInstance().getId();

                    try {
                        ResultSet lesTuples = daoReq.requeteSelection(req);
                        if (lesTuples.next()) {
                            Integer update = daoReq.updateImage(stream, file);
                            if (update == 1) {
                                jLabelSuccess.setForeground(Color.green);
                                jLabelSuccess.setText("Image modifiée !");
                            } else {
                                jLabelSuccess.setForeground(Color.red);
                                jLabelSuccess.setText("Echec de la modification !");
                            }
                        } else {
                            Integer update = daoReq.updateImage(stream, file);
                            if (update == 1) {
                                jLabelSuccess.setForeground(Color.green);
                                jLabelSuccess.setText("Image modifiée !");
                            } else {
                                jLabelSuccess.setForeground(Color.red);
                                jLabelSuccess.setText("Echec de la modification !");
                            }
                        }
                    } catch (SQLException ex) {
                        jLabelSuccess.setForeground(Color.red);
                        jLabelSuccess.setText("Echec du chargement, l'éxécution de la requête est un échec !!");
                        //  Logger.getLogger(Image.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println(ex);
                    }
                } else {
                    jLabelSuccess.setForeground(Color.orange);
                    jLabelSuccess.setText("Image trop lourde !!");
                }
            } else {
                jLabelSuccess.setForeground(Color.red);
                jLabelSuccess.setText("Veuillez sélectionner une image !");
            }
        } else {
            jLabelSuccess.setText("La connexion n'est pas active");
        }
    }//GEN-LAST:event_jButtonSendMouseClicked

    public void afficherImage(InputStream inputStream) {
        try {
            if (inputStream != null) {
                byte[] imagebyte = new byte[inputStream.available()];
                inputStream.read(imagebyte);
                jLabelImages.setIcon(new ImageIcon(new ImageIcon(imagebyte).getImage().getScaledInstance(250, -1, Image.SCALE_DEFAULT)));
            }
        } catch (IOException ex) {
            Logger.getLogger(ChoisirImage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void encodeToBlob() {
        try {
            this.stream = new FileInputStream(file);
            this.imagePrint = new FileInputStream(file);
//            Essai d'un code qui nous permettait d'obtenir l'image en base64 mais pas de l'envoyer.
//            byte[] bytes = new byte[(int)file.length()];
//            fileInputstreamReader.read(bytes);
//            encodedFile = new String(Base64.getEncoder().encode(bytes));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        JFrame test = new JFrame();
        ChoisirImage pannel = new ChoisirImage();
        test.getContentPane().add(pannel);
        test.setSize(800, 600);
        test.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSelectFile;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JLabel jLabelImages;
    private javax.swing.JLabel jLabelSelect;
    private javax.swing.JLabel jLabelSuccess;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
